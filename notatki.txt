
Korzystanie z baz danych.

Należy ustawic polaczenie w pliku application.ini
Nalezy skonstruowac baze danych.
Nastepnie stworzyc modele, uzywajac polecenia zf create db-table Naza_tabeli nazwa_tabeli_w_bazie_danych

i mozna korzystac z baz danych i tabel bezproblemowo.


Odczyt z tabeli: 
 $tabela = new Application_Model_Tabela();
$t = $tabela->fetchAll();
$t1 = $tabela->fetchAll('id=1');

Poleca sie korzystanie z obiektu select:
$u = $users->fetchAll($users->select()
                        ->where('id=1')
                        ->group('id')
                        ->join(....)
                        ->order('id')
                        ->limit($count, $offset));
Odczyt pojedynczego wiersza poprzez:
$tabela->fetchRow($tabela->select()
                            ->order('id'));

Odczyt metadanych tabeli:
$info = $table->info();
 
echo "The table name is " . $info['name'] . "\n";
Indeksy tabeli metadanych:
name, cols, primary, metadata, rowClass, rowsetClass,
referenceMap, dependentTables, schema.

Odczyt sekwencyjny z resultatu zapytania z użyciem metadanych:
$umeta=$users->info();
            $ret='';
            foreach($u as $uu){
                foreach($umeta['cols'] as $col){
                    $ret.=$col.': '.$uu->$col.' ';
                }
                $ret.='<br/>';
            }

Odwolywanie sie do pol w rezulacie poprzez zwykle przywolanie jak pol w obiekcie:
$t1->id; $t1->username, itd.

Usuwanie z tabeli:
$tabela->delete($sql);

Wstawianie i aktualizacja:
$tabela->insert(array('field1'=>value1, ..., 'fieldn'=>valuen);
$tabela->update($array_of_data, $array_of_conditions);

Aktualizowanie poprzez rekord:
    $bugs = new Bugs();
    $row = $bugs->fetchRow($bugs->select()->where('bug_id = ?', 1));
     
    // Change the value of one or more columns
    $row->bug_status = 'FIXED';
     
    // UPDATE the row in the database with new values
    $row->save();

Wstawianie nowych rekordow:

    $bugs = new Bugs();
    $newRow = $bugs->createRow();
     
    // Set column values as appropriate for your application
    $newRow->bug_description = '...description...';
    $newRow->bug_status = 'NEW';
     
    // INSERT the new row to the database
    $newRow->save();




Uzywanie formularzy
Zend_Form() - obiekt formularza
$z = new Zend_Form();
$zel = new Zend_Form_Element_Text('foo');
$z->addElement($zel);
lub
$z->addElement('text', 'foo', array('label'=>'Foo:'));


    $form->addElement('text', 'username', array(
        'validators' => array(
            'alnum',
            array('regex', false, '/^[a-z]/i')
        ),
        'required' => true,
        'filters'  => array('StringToLower'),
    ));

Dostep do elementow formularza:
$z->foo; lub $z->getElement('zoo');

Pobieranie wartosci z pol formularza:
$val = $z->getValue('foo');
$vals=$z->getValues();

Ustawienie wartosci pol:
$z->populate($data); lub $z->setDefaults($data);

Metadane formularzy:
$z->setName('name');
$name=$z->getName();
$z->setAction('/user/login')->setMethod('post')

Ilość elementów formularza:
$numItems = count($form);


Dekoratory formularzy - obiekty, które pomagają renderować formularz do pożądanej postaci, np.:

    $form->setDecorators(array(
        'FormElements',
        array('HtmlTag', array('tag' => 'dl')),
        'Form'
    ));
daje w rezultacie:
    <form action="/form/action" method="post">
    <dl>
    ...
    </dl>
    </form>

Wyłączanie dekoratorów:
$form = new Zend_Form(array('disableLoadDefaultDecorators' => true));

Walidacja formularzy:
    if (!$form->isValid($_POST)) {
        // failed validation
    }
Jeśli formularz nie przejdzie walidacji, można otrzymać kody błędów:
    $codes = $form->getErrors();
    $messages = $form->getMessages();

Możliwe jest też uzyskanie kodów dla poszczególnych elementów formularza:
    $codes = $form->getErrors('username');
    $messages = $form->getMessages('username');

Elementy formularza Zend_Form_Element_Text:
    $username = new Zend_Form_Element_Text('username');
     
    // Passing a Zend_Validate_* object:
    $username->addValidator(new Zend_Validate_Alnum());
     
    // Passing a validator name:
    $username->addValidator('alnum');
    // Pass a pattern
    $username->addValidator('regex', false, array('/^[a-z]/i'));

    // Make this element required:
    $username->setRequired(true);

$username->addFilter('StringtoLower');

Standardowe elementy formularza:
Zend_Form_Element_Button
Zend_Form_Element_Captcha
Zend_Form_Element_Checkbox
Zend_Form_Element_File
Zend_Form_Element_Hidden
Zend_Form_Element_Hash
Zend_Form_Element_Image
Zend_Form_Element_MultiCheckbox
Zend_Form_Element_Multiselect
Zend_Form_Element_Password
Zend_Form_Element_Radio
Zend_Form_Element_Reset
Zend_Form_Element_Select
Zend_Form_Element_Submit
Zend_Form_Element_Text
Zend_Form_Element_Textarea


Standardowe dekoratory formularza:
Zend_Form_Decorator_Callback
Zend_Form_Decorator_Captcha
Zend_Form_Decorator_Description
Zend_Form_Decorator_DtDdWrapper
Zend_Form_Decorator_Errors
Zend_Form_Decorator_Fieldset
Zend_Form_Decorator_File
Zend_Form_Decorator_Form
Zend_Form_Decorator_FormElements
Zend_Form_Decorator_FormErrors
Zend_Form_Decorator_HtmlTag
Zend_Form_Decorator_Image
Zend_Form_Decorator_Label
Zend_Form_Decorator_PrepareElements
Zend_Form_Decorator_Tooltip
Zend_Form_Decorator_ViewHelper
Zend_Form_Decorator_ViewScript


Internacjonalizacja:
    // use the 'Zend_Translate' key; $translate is a Zend_Translate object:
    Zend_Registry::set('Zend_Translate', $translate);

    // Tell all form classes to use a specific translate adapter, as well
    // as use this adapter to translate validation error messages:
    Zend_Form::setDefaultTranslator($translate);
    // Tell *this* form instance to use a specific translate adapter; it
    // will also be used to translate validation error messages for all
    // elements:
    $form->setTranslator($translate);
     
    // Tell *this* element to use a specific translate adapter; it will
    // also be used to translate validation error messages for this
    // particular element:
    $element->setTranslator($translate);


Logowanie informacji:
Obiekt Zend_Log, ktoremu przypisujemy Zend_Writer i Zend_Filter
    $logger = new Zend_Log();
    $writer = new Zend_Log_Writer_Stream('php://output');
     
    $logger->addWriter($writer);

lub poprzez dodanie writera do konstruktora:
    $writer = new Zend_Log_Writer_Stream('php://output');
    $logger = new Zend_Log($writer);

Logowanie informacji:
$logger->log('Informational message', Zend_Log::INFO);

$logger->info('Informational message');
 
$logger->log('Emergency message', Zend_Log::EMERG);
$logger->emerg('Emergency message');

Priorytety logowania:
    EMERG   = 0;  // Emergency: system is unusable
    ALERT   = 1;  // Alert: action must be taken immediately
    CRIT    = 2;  // Critical: critical conditions
    ERR     = 3;  // Error: error conditions
    WARN    = 4;  // Warning: warning conditions
    NOTICE  = 5;  // Notice: normal but significant condition
    INFO    = 6;  // Informational: informational messages
    DEBUG   = 7;  // Debug: debug messages

Logowanie bledow PHP przy uzyciu Zend_Log:
Należy wywołać registerErrorHandler